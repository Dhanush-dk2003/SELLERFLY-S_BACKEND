generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                        Int                 @id @default(autoincrement())
  password                  String?
  role                      Role                @default(USER)
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  accountNumber             String?
  address                   String?
  bankName                  String?
  bloodGroup                String?
  department                String?
  designation               String?
  dob                       DateTime
  emergencyNumber           String
  employeeId                String              @unique
  firstName                 String
  gender                    String
  ifscCode                  String?
  joiningDate               DateTime
  lastName                  String
  officialEmail             String              @unique
  personalEmail             String?
  phoneNumber               String
  profilePic                Bytes?
  salary                    String?
  permissionRequestsSent    PermissionRequest[] @relation("SentRequests")
  permissionRequestsHandled PermissionRequest[] @relation("HandledRequests")
  tasks                     Task[]
  sessions                  UserSession[]
  projects                  Project[]           @relation("UserProjects")
}

model UserSession {
  id            Int       @id @default(autoincrement())
  userId        Int
  loginTime     DateTime
  logoutTime    DateTime?
  totalDuration Float?
  user          User      @relation(fields: [userId], references: [id])
}

model Project {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String   @default("TODO")
  tasks     Task[]
  users     User[]   @relation("UserProjects")
}

model Task {
  id        Int      @id @default(autoincrement())
  title     String
  status    Status   @default(TODO)
  userId    Int?
  projectId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@unique([title, projectId])
}

model PermissionRequest {
  id              Int      @id @default(autoincrement())
  requestedById   Int
  toEmail         String
  reason          String
  status          String   @default("PENDING")
  respondedById   Int?
  responseMessage String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  startTime       DateTime
  endTime         DateTime
  receiverDeleted Boolean  @default(false)
  senderDeleted   Boolean  @default(false)
  requestedBy     User     @relation("SentRequests", fields: [requestedById], references: [id])
  respondedBy     User?    @relation("HandledRequests", fields: [respondedById], references: [id])
}

model Client {
  id                   Int        @id @default(autoincrement())
  fullName             String
  mobileNumber         String
  address              String?
  email                String?
  pickupAddress        String?
  bankName             String?
  branchName           String?
  accountHolderName    String?
  accountNumber        String?
  ifscCode             String?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  companyName          String     @default("")
  budget               Float?
  aPlus                Boolean    @default(false)
  brandWebstore        Boolean    @default(false)
  description          String?
  documentsLink        String?
  gstCertificateNumber String?
  brandRegistryDoc     Boolean    @default(false)
  category             String?
  currentAccountDoc    Boolean    @default(false)
  gstDoc               Boolean    @default(false)
  onboardedDate        DateTime?
  panDoc               Boolean    @default(false)
  trademarkDoc         Boolean    @default(false)
  isActive             Boolean    @default(false)
  productCount         Int        @default(0)
  lastPaymentDate      DateTime?  @db.Timestamp(6)
  followups            Followup[]
  portals              Portal[]

  @@index([companyName])
}

model Portal {
  id           Int           @id @default(autoincrement())
  portalName   String
  username     String
  password     String
  status       Status        @default(TODO)
  remarks      String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  clientId     Int
  masterLink   String?
  portalLink   String?
  endDate      DateTime?
  portalHealth PortalHealth?
  startDate    DateTime?
  registeredBy RegisteredBy  @default(US)
  client       Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([clientId, portalName, username])
  @@index([status])
}

model Followup {
  id          Int      @id @default(autoincrement())
  date        DateTime @default(now())
  companyName String
  portalName  String
  description String?
  clientId    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  client      Client?  @relation(fields: [clientId], references: [id])
}

enum Role {
  ADMIN
  MANAGER
  USER
}

enum Status {
  TODO
  IN_PROGRESS
  DONE
}

enum PortalHealth {
  GOOD
  BAD
  NEEDS_IMPROVEMENT
}

enum RegisteredBy {
  US
  CLIENT
}
